name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master


env: 
  AWS_REGION: us-west-2
  ecr-repo: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # - name: Create ECR repo if necessary
    #   id: ecr-repo
    #   uses: @2iq/aws-ecr-create-repository@v1
    #   with:
    #     ecr-name: $${{ env.ECR_REPOSITORY }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ecr-repo:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ecr-repo:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ecr-repo:$IMAGE_TAG"

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

     # - name: Install and configure kubectl
      #   run: |
      #     VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
      #     curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
      #       --progress-bar \
      #       --location \
      #       --remote-name
      #     chmod +x kubectl
      #     sudo mv kubectl /usr/local/bin/
      #     echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
      # - name: Deploy
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   run: |
      #     export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
      #     export IMAGE_TAG=${{ env.SHORT_SHA }}
      #     export KUBECONFIG=kubeconfig.yaml
      #     envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
      #     kubectl kustomize k8s | kubectl apply -f -
